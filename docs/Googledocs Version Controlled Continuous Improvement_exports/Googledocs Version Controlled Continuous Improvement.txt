DOCWHEEL-CI



Open Source Software Documentation Continuous Improvement using Google Docs, Github and Gerrit




Technical implementation of a DevOps Continuous Improvement methodology to create collaborative software documentation. 
The following document outlines the theory behind CI for google docs with github and gerrit addition.


The rationale is the use of googledocs for collaborative document editing and creation. A project documentation artefact is collaboratively written and continuously pushed to a Gerrit CI approval system, the proposed changes can be viewed in the text version of the document and approved for push to the master github repo to provide a new release of the documentation. Gerrit is used to approve and track the changed documentation. The commits could be daily/nightly or by the minute, depending on change and approval cadence.


There are two main use cases: 
1. The creation of collaborative documentation in a version controlled change approved way. 
2. The collaborative creation of Software documentation, version controlled and change approved for Github based software projects.   


There are also other potential use cases: 
IT Consultants on site at customer engagements who require a version controlled interactive documentation lifecycle. (though information security should an additional consideration in this context)    


collaborative config file management? 
Potential for Dockerfiles to be collaboratively written in Googledocs and change approved/version controlled via Gerrit and Github. 


Technology used: 


1. Google Docs: Collaborative editing of documentation. 
2. Go drive script for collection of google docs on change 
3. Bash or Jenkins Automation for Go drive Linux CLI script
4. Docker image for Golang  and Go drive scripts (available)  
5. Gerrit for change approval and Continuous improvement structure +1 voting approval
6. Github for version controlled storage of the released docs, or as a target project for documentation generation. 


The Workflow for documents: 


Googledocs -> Gerrit -> Voted Approval -> Github -> Distribution


Possible Workflow for software documentation that requires collaborative input from multiple developers: 


(Code contains comments) -> Initial text doc created using comments/tooling -> pushed to googledoc and into the Continuous Improvement iterative cycle -> All developers can collaborate on software documentation in a single place -> CI returns doc back to the Github source tree via Gerrit approval structure (enables release alignment) 
Additional note: In fact this structure is so positive it is possible to hold back future patch sets in Gerrit for dedicated release at a specific time. i.e. Documentation could be aligned with new feature improvements but not submitted in Gerrit until new feature set is released. 


Technical components: 


1. Go drive script located here: https://github.com/odeke-em/drive
2. Gerrit: http://gerrithub.io/
3. Github: https://github.com/
4. Docwheel3 script located in this repository in the /scripts/ directory (the CI automation base) 
5. Linux distribution/Docker with crontab or Jenkins: http://jenkins-ci.org/ and maybe a go_drive oauth plugin: https://wiki.jenkins-ci.org/display/JENKINS/Google+OAuth+Plugin
6. Maybe a Jenkins Docker image running on Openshift: https://github.com/openshift/jenkins-1-centos 


Crontab configuration method:
Docwheel can be launched as a basic bash script on a Linux host machine. The bash script  utilises Go drive API CLI tool and git and automates the checkout and update of googledocs changes in a Continuous improvement way.  
Jenkins configuration method: 


Jenkins can be used as the orchestration tool to run a Docwheel build project. The Docwheel Jenkins build project config is located in the jenkins sub directory. 
The following Jenkins plugin modules are required: 




This is mats suggestion - this is Great!